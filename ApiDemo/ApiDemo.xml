<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApiDemo</name>
    </assembly>
    <members>
        <member name="T:ApiDemo.Controllers.ConfigIdController">
            <summary>
            ConfigIdController
            </summary>
        </member>
        <member name="M:ApiDemo.Controllers.ConfigIdController.#ctor(ApiDemo.Library.Contracts.IConfigId)">
            <summary>
            ConfigIdController
            </summary>
            <param name="configId"></param>
        </member>
        <member name="T:ApiDemo.Controllers.DecryptController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ApiDemo.Controllers.DecryptController.#ctor(ApiDemo.Library.Contracts.IAes)">
            <summary>
            DecryptController
            </summary>
            <param name="aes"></param>
        </member>
        <member name="M:ApiDemo.Controllers.DecryptController.Get(System.String)">
            <summary>
            GET: api/Decrypt/cipher
            </summary>
            <param name="cipher"></param>
            <returns></returns>
        </member>
        <member name="T:ApiDemo.Controllers.EncryptController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ApiDemo.Controllers.EncryptController.#ctor(ApiDemo.Library.Contracts.IAes)">
            <summary>
            EncryptController
            </summary>
            <param name="aes"></param>
        </member>
        <member name="M:ApiDemo.Controllers.EncryptController.Get(System.String)">
            <summary>
            GET: api/Decrypt/plain
            </summary>
            <param name="plain"></param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Controllers.ImprintController.Get">
            <summary>
            api/Imprint summary
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Controllers.LocationsController.#ctor(ApiDemo.Library.Contracts.ILocation)">
            <summary>
            
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:ApiDemo.Controllers.LocationsController.Get(System.String)">
            <summary>
            Get - http://localhost:9008/api/Locations/30303
            </summary>
            <param name="itemid">30303 (T-shirt), 34939 (multiple groups)</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Controllers.QrCodeController.#ctor(ApiDemo.Library.Contracts.IQrCodeLibrary)">
            <summary>
            DecryptController
            </summary>
            <param name="aes"></param>
        </member>
        <member name="T:ApiDemo.Controllers.TestProductController">
            <summary>
            TestProductController
            </summary>
        </member>
        <member name="M:ApiDemo.Controllers.ValuesController.Get">
            <summary>
            GET api/values
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Controllers.ValuesController.Get(System.Int32,System.String)">
            <summary>
            GET api/values/0
            </summary>
            <remarks>
            例子:
            Get api/Values/1
            </remarks>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Controllers.ValuesController.Post(ApiDemo.Controllers.User)">
            <summary>
            POST api/values
            </summary>
            <param name="value"></param>
            <response code="201">返回value字符串</response>
            <response code="400">如果id为空</response>
        </member>
        <member name="M:ApiDemo.Controllers.ValuesController.Put(System.Int32,System.String)">
            <summary>
            PUT api/values/5
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:ApiDemo.Controllers.ValuesController.Delete(System.Int32)">
            <summary>
            DELETE api/values/5
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:ApiDemo.Controllers.User">
            <summary>
            用户类
            </summary>
        </member>
        <member name="P:ApiDemo.Controllers.User.UserAge">
            <summary>
            用户年龄
            </summary>
        </member>
        <member name="P:ApiDemo.Controllers.User.UserID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:ApiDemo.Controllers.User.UserName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="T:ApiDemo.Filter.HiddenApiAttribute">
            
            隐藏swagger接口特性标识
            
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Add(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.AddAsync(System.String,System.Object)">
            <summary>
            添加缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Add(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.AddAsync(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Add(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.AddAsync(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.RemoveAsync(System.String)">
            <summary>
            删除缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存
            </summary>
            <param name="key">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.RemoveAllAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存（异步方式）
            </summary>
            <param name="key">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.GetAsync``1(System.String)">
            <summary>
            获取缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.GetAsync(System.String)">
            <summary>
            获取缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.GetAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取缓存集合
            </summary>
            <param name="keys">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.GetAllAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取缓存集合（异步方式）
            </summary>
            <param name="keys">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Replace(System.String,System.Object)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.ReplaceAsync(System.String,System.Object)">
            <summary>
            修改缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Replace(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.ReplaceAsync(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            修改缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Replace(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.ReplaceAsync(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            修改缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="T:ApiDemo.Library.Aes">
            <summary>
            Aes
            </summary>
        </member>
        <member name="M:ApiDemo.Library.Aes.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Decrypt
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:ApiDemo.Library.Aes.AesDecrypt(System.String)">
            <summary>
            AesDecrypt
            </summary>
            <param name="cipherText"></param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Library.Aes.AesEncrypt(System.String)">
            <summary>
            AesEncrypt
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Library.ConfigId.GetNewConfigId">
            <summary>
            GetNewConfigId
            </summary>
            <returns>NewConfigId</returns>
        </member>
        <member name="T:ApiDemo.Library.Contracts.IAes">
            <summary>
            IAes
            </summary>
        </member>
        <member name="M:ApiDemo.Library.Contracts.IAes.AesDecrypt(System.String)">
            <summary>
            AesDecrypt
            </summary>
            <param name="cipherText"></param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Library.Contracts.IAes.AesEncrypt(System.String)">
            <summary>
            AesEncrypt
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Library.Contracts.IQrCodeLibrary.ToQR(System.String)">
            <summary>
            获取链接地址对应的二维码图像
            </summary>
        </member>
        <member name="M:ApiDemo.Library.Location.GetLocations(System.String)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Library.Location.ImprintFormatGroupInitialze(ApiDemo.Models.ui.locations.Combination,System.Collections.Generic.List{ApiDemo.Models.ui.locations.Format})">
            <summary>
            ImprintFormatGroupInitialze
            </summary>
            <param name="lstDefaultItem">for IsSelected, selected option by edit from database</param>
            <param name="imprintFormatGroup"></param>
        </member>
        <member name="M:ApiDemo.Library.TestProductLib.GetNaFormat(System.String)">
            <summary>
            get Not Application ImprintFormat
            </summary>
            <param name="defaultImprintAreaCodeKey">default ImprintAreaCode</param>
            <returns>Not Application ImprintFormat</returns>
        </member>
        <member name="T:ApiDemo.Models.GeneralConstant">
            <summary>
            the constants for app
            </summary>
            <remarks>
            the naming convention: Pascal without underscore(_)
            </remarks>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.ItemId">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.Bom">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.Vignette">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.FoldLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.MultipleSides">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.Upsell">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.Prop65">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.Note">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.VendorId">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.Verse">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.Sentiment">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.Slogan">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.ImprintRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiDemo.Models.TestProduct.GroupedQuantity">
            <summary>
            
            </summary>
        </member>
        <member name="M:ApiDemo.Services.ConfigIdService.GetNewConfigId">
            <inheritdoc />
        </member>
        <member name="M:ApiDemo.Services.ConfigIdService.GetRootPath">
            <summary>
            取得网站根目录的物理路径
            </summary>
            <returns></returns>
        </member>
        <member name="T:ApiDemo.Services.FiftyOneDegreesService">
            <summary>
            FiftyOneDegreesService
            </summary>
        </member>
        <member name="M:ApiDemo.Services.FiftyOneDegreesService.#ctor(ApiDemo.Interface.ICacheService)">
            <summary>
            FiftyOneDegreesService
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Add(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Add(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Add(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存
            </summary>
            <param name="key">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.GetAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取缓存集合
            </summary>
            <param name="keys">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.AddOrCreate(System.String,System.Object)">
            <summary>
            存在创建不存在获取
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Modify(System.String,System.Object)">
            <summary>
            修改缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            修改时 MemoryCache 没有提供相对相应的方法，先删除后添加
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Replace(System.String,System.Object)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Replace(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Replace(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Exists(System.String)">
            <summary>
            验证缓存是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.TestProductService.GetTestProduct">
            <inheritdoc />
        </member>
        <member name="M:ApiDemo.Services.TestProductService.GetRootPath">
            <summary>
            取得网站根目录的物理路径
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ApiDemo.Utils.Extension.ToEnum``1(System.String)" -->
        <member name="M:ApiDemo.Utils.Extension.GetIntOrZero(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个int类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrBool(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个布尔（bool)类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrByte(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个byte类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrChar(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个char类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrDateTime(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个DateTime类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrDecimal(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个Decimal类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrDouble(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个double类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrFloat(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个float类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrGuid(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个Guid类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrInt(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个int类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrLong(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个long类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrSByte(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个sbyte类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrShort(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个short类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrString(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，Trim()后返回该字符串。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrUInt(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个uint类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrULong(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个ulong类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.GetNullOrUShort(System.String)">
            <summary>
            对所传入的字符串进行判断，如果字符串为空，直接返回null值。
            如字符串不为空，尝试将该字符串转换为一个ushort类型返回。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsBool(System.String)">
            <summary>
            判断一个字符串是否是一个有效的布尔（bool)类型。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsByte(System.String)">
            <summary>
            判断一个字符串是否是一个有效的正整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsChar(System.String)">
            <summary>
            判断一个字符串是否是一个有效的Char类型。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsDateTime(System.String)">
            <summary>
            判断一个字符串是否是一个有效的日期。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsDecimal(System.String)">
            <summary>
            判断一个字符串是否是一个有效的数字。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsDouble(System.String)">
            <summary>
            判断一个字符串是否是一个有效的数字。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsFloat(System.String)">
            <summary>
            判断一个字符串是否是一个有效的数字。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsGuid(System.String)">
            <summary>
            判断一个字符串是否是一个有效的Guid。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsInt(System.String)">
            <summary>
            判断一个字符串是否是一个有效的整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsLong(System.String)">
            <summary>
            判断一个字符串是否是一个有效的整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNull(System.Object)">
            <summary>
            判断一个对象是否为空，如传入对象为string类型，
            该方法会判断所传入的string是否包含内容。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrBool(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的布尔（bool)类型。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrByte(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的正整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrChar(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的Char类型。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrDateTime(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的日期。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrDecimal(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的数字。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrDouble(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的数字。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrFloat(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的数字。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrGuid(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的Guid。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrInt(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrLong(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrSByte(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrShort(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrUInt(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的正整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrULong(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的正整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsNullOrUShort(System.String)">
            <summary>
            判断一个字符串是否为空，当所传入的字符串不会空时，
            将检测该字符串是否是一个有效的正整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsOutLength(System.String,System.Int32)">
            <summary>
            判断所传入字符串的长度，是否超过指定长度。
            如果字符串为空或null，返回false。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsSByte(System.String)">
            <summary>
            判断一个字符串是否是一个有效的整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsShort(System.String)">
            <summary>
            判断一个字符串是否是一个有效的整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsUInt(System.String)">
            <summary>
            判断一个字符串是否是一个有效的正整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsULong(System.String)">
            <summary>
            判断一个字符串是否是一个有效的正整数。
            </summary>
        </member>
        <member name="M:ApiDemo.Utils.Extension.IsUShort(System.String)">
            <summary>
            判断一个字符串是否是一个有效的正整数。
            </summary>
        </member>
    </members>
</doc>
