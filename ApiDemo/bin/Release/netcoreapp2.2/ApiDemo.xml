<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApiDemo</name>
    </assembly>
    <members>
        <member name="M:ApiDemo.Controllers.ImprintController.Get">
            <summary>
            api/Imprint summary
            </summary>
            <returns></returns>
        </member>
        <member name="T:ApiDemo.Controllers.User">
            <summary>
            用户类
            </summary>
        </member>
        <member name="P:ApiDemo.Controllers.User.UserID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:ApiDemo.Controllers.User.UserName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="P:ApiDemo.Controllers.User.UserAge">
            <summary>
            用户年龄
            </summary>
        </member>
        <member name="M:ApiDemo.Controllers.ValuesController.Get">
            <summary>
            GET api/values
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Controllers.ValuesController.Get(System.Int32,System.String)">
            <summary>
            GET api/values/0
            </summary>
            <remarks>
            例子:
            Get api/Values/1
            </remarks>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Controllers.ValuesController.Post(ApiDemo.Controllers.User)">
            <summary>
            POST api/values
            </summary>
            <param name="value"></param>
            <response code="201">返回value字符串</response>
            <response code="400">如果id为空</response>
        </member>
        <member name="M:ApiDemo.Controllers.ValuesController.Put(System.Int32,System.String)">
            <summary>
            PUT api/values/5
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:ApiDemo.Controllers.ValuesController.Delete(System.Int32)">
            <summary>
            DELETE api/values/5
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ApiDemo.HttpHeaderOperation.Apply(Swashbuckle.AspNetCore.Swagger.Operation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            实现接口
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Add(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.AddAsync(System.String,System.Object)">
            <summary>
            添加缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Add(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.AddAsync(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Add(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.AddAsync(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.RemoveAsync(System.String)">
            <summary>
            删除缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存
            </summary>
            <param name="key">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.RemoveAllAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存（异步方式）
            </summary>
            <param name="key">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.GetAsync``1(System.String)">
            <summary>
            获取缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.GetAsync(System.String)">
            <summary>
            获取缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.GetAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取缓存集合
            </summary>
            <param name="keys">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.GetAllAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取缓存集合（异步方式）
            </summary>
            <param name="keys">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Replace(System.String,System.Object)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.ReplaceAsync(System.String,System.Object)">
            <summary>
            修改缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Replace(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.ReplaceAsync(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            修改缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.Replace(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Interface.ICacheService.ReplaceAsync(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            修改缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Add(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Add(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Add(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存
            </summary>
            <param name="key">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.GetAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取缓存集合
            </summary>
            <param name="keys">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.AddOrCreate(System.String,System.Object)">
            <summary>
            存在创建不存在获取
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Modify(System.String,System.Object)">
            <summary>
            修改缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            修改时 MemoryCache 没有提供相对相应的方法，先删除后添加
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Replace(System.String,System.Object)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Replace(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Replace(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:ApiDemo.Services.MemoryCacheService.Exists(System.String)">
            <summary>
            验证缓存是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
    </members>
</doc>
